# OpenAPI specification for ViveSaude Lábios minimal backend
openapi: 3.0.3
info:
  title: ViveSaude Lábios API
  version: 0.1.0
  description: Minimal API for auth, exams, OCR analysis and export.
servers:
  - url: https://api.vivesaude.com.br/v1
paths:
  /auth/login:
    post:
      summary: Login with email/password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string, format: password }
      responses:
        '200':
          description: Tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: { type: string }
                  refreshToken: { type: string }
  /auth/refresh:
    post:
      summary: Refresh access token
      responses:
        '200':
          description: New access token
  /exams:
    get:
      summary: List exams
      responses:
        '200':
          description: Exam list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Exam'
    post:
      summary: Create exam metadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExamCreate'
      responses:
        '201':
          description: Created
  /exams/{id}/files:
    post:
      summary: Upload exam PDF file
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '204': { description: Uploaded }
  /exams/{id}/analyze:
    post:
      summary: Analyze crop area of a page
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CropRequest'
      responses:
        '200':
          description: Parsed parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResult'
  /exams/{id}/results:
    get:
      summary: Get exam results
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Exam model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exam'
  /exams/{id}/export:
    get:
      summary: Export results as CSV or PDF
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: [csv, pdf]
      responses:
        '200':
          description: File stream
          content:
            text/csv: {}
            application/pdf: {}

components:
  schemas:
    ExamParameter:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        value: { type: string }
        unit: { type: string, nullable: true }
        referenceRange: { type: string, nullable: true }
    Exam:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        lab: { type: string, nullable: true }
        collectedAt: { type: string, format: date-time }
        parameters:
          type: array
          items: { $ref: '#/components/schemas/ExamParameter' }
    ExamCreate:
      type: object
      properties:
        title: { type: string }
        collectedAt: { type: string, format: date-time }
        lab: { type: string }
    CropRequest:
      type: object
      properties:
        page: { type: integer }
        rect:
          type: object
          properties:
            x: { type: number }
            y: { type: number }
            width: { type: number }
            height: { type: number }
    AnalysisResult:
      type: object
      properties:
        parameters:
          type: array
          items: { $ref: '#/components/schemas/ExamParameter' }

